plugins {
    id 'fabric-loom' version '0.12-SNAPSHOT'
    id 'org.ajoberstar.grgit' version '4.1.0'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = "${project.archives_base_name}-mc${project.minecraft_version}"
version = "${project.mod_version}+${getVersionMetadata()}"
group = project.maven_group

import com.google.common.io.Files as GFiles

loom {
    mixin.defaultRefmapName = "mixins.sodium.refmap.json"
    accessWidenerPath = file("src/main/resources/sodium.accesswidener")
}

configurations {
    modIncludeImplementation

    include.extendsFrom modIncludeImplementation
    modImplementation.extendsFrom modIncludeImplementation
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    implementation 'org.joml:joml:1.10.2'
    include 'org.joml:joml:1.10.2'

    // Fabric API
    modIncludeImplementation(fabricApi.module("fabric-api-base", project.fabric_version))
    modIncludeImplementation(fabricApi.module("fabric-rendering-fluids-v1", project.fabric_version))
    modIncludeImplementation(fabricApi.module("fabric-rendering-data-attachment-v1", project.fabric_version))
    modIncludeImplementation(fabricApi.module("fabric-resource-loader-v0", project.fabric_version))
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

java {
    withSourcesJar()
}

jar {
    from "LICENSE.txt"
}

def getVersionMetadata() {
    def build_id = System.getenv("GITHUB_RUN_NUMBER")

    // CI builds only
    if (build_id != null) {
        return "build.${build_id}"
    }

    if (grgit != null) {
        def head = grgit.head()
        def id = head.abbreviatedId

        // Flag the build if the build tree is not clean
        if (!grgit.status().clean) {
            id += "-dirty"
        }

        return "rev.${id}"
    }

    // No tracking information could be found about the build
    return "unknown"
}

def printModDeployError() {
    def mcDirProp = "minecraft_directory." + version

    println ""
    println ":: Minecraft mods directory for $version is not set."
    println ":: Specify the property $mcDirProp in your secrets.properties or gradle.properties file."
    println ":: Example value:"
    println ":: $mcDirProp=/home/user/.local/.minecraft/mods"
    println ""
}

build {
    doLast {

        Properties properties = new Properties()
        def secretsFile = project.rootProject.file('secrets.properties')
        if (!secretsFile.exists()) {
            printModDeployError()
            return
        }
        properties.load(secretsFile.newDataInputStream())

        for (final def prop in properties.keys()) {
            println "Available property: $prop => ${ properties.getProperty(prop) } "
        }

        def mcDirProp = "minecraft_directory." + version
        def mcDir = properties.getProperty(mcDirProp)

        if (mcDir == null) {
            printModDeployError()
            return
        }

        println ""
        println ":: Installing mod in $mcDir"

        def mcDirFile = file(mcDir)
        if (!mcDirFile.directory) {
            println ""
            println ":: $mcDirProp is not a directory! Aborting..."
            println ""
            return
        }

        def mods = mcDirFile.listFiles()
        def modName = "${getArchivesBaseName()}-${version}.jar"
        def modRelativePath = "build/libs/$modName"
        def modFile = file(modRelativePath)


        def modCopied = false
        if (mods != null) {
            mods.each {
                if (it.name.equalsIgnoreCase(modName)) {
                    println ":: Overwriting ${ it.name }..."
                    GFiles.copy(modFile, it)
                    modCopied = true
                } else if (it.name.startsWith(getArchivesBaseName()) && !it.name.endsWith("disabled")) {
                    println ":: Disabling ${ it.name }..."
                    it.renameTo(mcDirFile.toPath().resolve(it.name + ".disabled").toFile())
                }
            }
        }

        if (!modCopied) {
            GFiles.copy(modFile, mcDirFile.toPath().resolve(modName).toFile())
        }
    }
}

